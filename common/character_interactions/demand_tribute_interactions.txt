#Interactions relating to tributary relationship management


### Demand Tributary - bilateral
# actor = offerer / potential suzerain
# recipient = receiver / potential tributary

demand_tribute_tributary_interaction = {
	category = interaction_category_diplomacy
	common_interaction = yes
	icon = demand_tributary_interaction

	desc = demand_tributary_interaction_desc

	is_shown = {
		scope:actor = {
			NOT = { 
				government_has_flag = government_is_nomadic
				this = scope:recipient
				top_suzerain = scope:recipient.top_suzerain # ensures the actor and recipient is not already in the same "suzerain bloc"
			}

			demand_tribute_peacefully_trigger = yes
			
			trigger_if = {
				limit = {
					is_ai = yes
				}
				current_military_strength >= scope:recipient.one_and_a_half_times_current_military_strength
				primary_title.tier >= scope:recipient.primary_title.tier
			}
		}
		scope:recipient = {
			highest_held_title_tier >= tier_county
			is_independent_ruler = yes # target cannot be a vassal
			NOT = { government_has_flag = cannot_be_vassal_or_liege }
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			custom_tooltip = {
				text = demand_tribute_requires_crown_authority_tt
				 has_realm_law_flag = can_have_tributaries
			}
		}
		scope:actor = {
			NOT = { has_truce = scope:actor }
			is_physically_able = yes
			is_travelling = no
			NOT = { exists = involved_activity }
		}
		scope:recipient = {
			is_tributary = no
			is_at_war = no
			custom_tooltip = {
				text = demand_tributary_interaction_cooldown_active_tt
				NOT = {
					has_opinion_modifier = {
						modifier = tributary_demanded_opinion
						target = scope:actor
					}
				}
			}
			is_confederation_member = no
		}
		scope:actor = {
			custom_tooltip = {
				text = mpo_interaction_not_neighbouring_tt
				any_land_neighboring_realm_with_tributaries_owner = { 
					this = scope:recipient
				}
			}
		}
	}

	cost = {
		prestige = minor_prestige_value	
	}

	greeting = positive
	notification_text = DEMAND_TRIBUTARY_INTERACTION_NOTIFICATION

	on_accept = {
		start_tributary_interaction_effect = {
			TRIBUTARY = scope:recipient
			SUZERAIN = scope:actor
		}
		scope:actor = {
			trigger_event = char_interaction.0362
		}
		scope:recipient = {
			add_opinion = {
				modifier = tributary_demanded_opinion # this opinion also acts as a built-in cooldown
				target = scope:actor
			}
		}
		consume_all_criminal_reasons_effect = {
			LIEGE = scope:actor
			CRIMINAL = scope:recipient
		}
	}

	on_decline = {
		scope:actor = {
			trigger_event = char_interaction.0363
		}
		scope:recipient = {
			add_opinion = {
				modifier = tributary_demanded_opinion # this opinion also acts as a built-in cooldown
				target = scope:actor
			}
			custom_tooltip = demand_tributary_interaction_cooldown_tt
		}
	}
	
	ai_maybe = yes

	ai_potential = {
		highest_held_title_tier > 1 # at least a count-level ruler
		is_independent_ruler = yes
	}

	ai_targets = {
		ai_recipients = neighboring_rulers_including_tributary_borders
		max = 5
	}

	ai_frequency = 4

	force_notification = yes

	ai_will_do = {	# AI will often do this to valid targets that aren't a military threat to them, especially if they're rich
		base = 0
		
		modifier = {
			add = {
				add = scope:recipient.gold
				divide = 10
				max = 100
			}
			desc = accumulated_wealth_reason
		}

		ai_military_threat_modifier_with_cbs = { 
			SENDER = scope:actor 
			RECEIVER = scope:recipient
			MULTIPLIER = -1 
		}

		#DON't MEDDLE WITH THE NOMADS
		modifier = {
			trigger = {
				scope:recipient = {
					government_has_flag = government_is_nomadic
				}
			}
			add = -40
		}

		# modifier = {
		# 	scope:recipient = { is_obedient_to = scope:actor }
		# 	add = 40
		# 	desc = obedient_interaction_reason
		# }

		modifier = { # Generally don't try to tributarize those of higher rank than you
			trigger = {
				"scope:recipient.tier_difference(scope:actor)" > 1
			}
			add = -40
		}

		# modifier = { # Generally don't try to tributarize those of higher dominance than you
		# 	trigger = {
		# 		scope:recipient.dominance_value > scope:actor.dominance_value
		# 	}
		# 	add = -50
		# }

		modifier = { # Remote Realm.
			trigger = {
				scope:actor = {
					NOT = {
						any_neighboring_top_liege_realm_owner = { this = scope:recipient }
					}
				}
				scope:actor.capital_province = { squared_distance = { target = scope:recipient.capital_province value >= 200000 } }
			}
			add = -25
		}

		#DON'T STEAL HERDERS FROM THE NOMADS
		modifier = {
			trigger = {
				scope:recipient = { government_has_flag = government_is_herder }
			}
			add = -1000
		}
	}

	ai_min_reply_days = 5
	ai_max_reply_days = 10
	
	# auto_accept = {
	# 	custom_tooltip = {
	# 		text = scheme_agent_aptitude.is_herder
	# 		scope:recipient = { government_has_flag = government_is_herder }
	# 	}
	# }

	ai_accept = {
		base = -60
		
		modifier = { # Perk boost
			desc = offer_vassalization_true_ruler_perk_tt
			trigger = {
				scope:actor = { has_perk = true_ruler_perk }
			}
			add = true_ruler_value
		}

		#Yurt bonuses
		# modifier = {
		# 	desc = tributary_yurt_02_domicile_building
		# 	trigger = {
		# 		scope:actor.domicile ?= { has_domicile_parameter = nomad_yurt_increased_tributary_acceptance_lvl_1 }
		# 	}
		# 	add = 5
		# }

		# modifier = {
		# 	desc = tributary_yurt_02_domicile_building
		# 	trigger = {
		# 		scope:actor.domicile ?= { has_domicile_parameter = nomad_yurt_increased_tributary_acceptance_lvl_2 }
		# 	}
		# 	add = 10
		# }

		# modifier = {
		# 	desc = tributary_yurt_02_domicile_building
		# 	trigger = {
		# 		scope:actor.domicile ?= { has_domicile_parameter = nomad_yurt_increased_tributary_acceptance_lvl_3 }
		# 	}
		# 	add = 15
		# }
 
		modifier = { # the bolder they are, the less likely they will agree to this and vice versa
			NOT = { ai_boldness = 0 }
			add = {
				value = ai_boldness
				multiply = -1
				divide = 2
			}
			desc = TRIBUTARY_BOLDNESS_REASON
		}

		modifier = { # the greedier they are, the less likely they will agree to this
			ai_greed > 0
			add = {
				value = ai_greed
				multiply = -1
				divide = 4
			}
			desc = TRIBUTARY_GREED_REASON
		}

		# modifier = {
		# 	is_obedient_to = scope:actor
		# 	add = 40
		# 	desc = obedient_interaction_reason
		# }
		
		# modifier = {
		# 	scope:actor = { is_gurkhan = yes }
		# 	add = 20
		# 	desc = gurkhan_interaction_reason
		# }
		
		# Easier to make Tributaries during the Zud season
		# modifier = {
		# 	any_character_situation = {
		# 		any_situation_sub_region = {
		# 			has_sub_region_phase_parameter = the_great_steppe_easier_tributaries
		# 			any_situation_sub_region_participant_group = {
		# 				participant_group_type = nomad_rulers_capital
		# 				participant_group_has_character = scope:actor
		# 			}
		# 		}
		# 	}
		# 	add = 25
		# 	desc = zud_season_reason
		# }
  		
  		# if the actor is a major threat to the recipient they're more likely to accept
		ai_military_threat_modifier_with_cbs = {
			SENDER = scope:recipient 
			RECEIVER = scope:actor
			MULTIPLIER = 1 
		}

		modifier = { # They are a King
			desc = demand_tributary_interaction_aibehavior_hightier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -20
		}

		modifier = { # They are an Emperor or greater
			desc = demand_tributary_interaction_aibehavior_hightier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier >= tier_empire }
			}
			add = -50
		}

		# modifier = { # Recipient has higher Dominance than the actor
		# 	desc = demand_tributary_interaction_aibehavior_dominance_tt
		# 	trigger = {
		# 		scope:recipient.dominance_value > scope:actor.dominance_value
		# 	}
		# 	add = -20
		# }

		# modifier = { # Actor has higher Dominance than the recipient
		# 	desc = demand_tributary_interaction_aibehavior_dominance_tt
		# 	trigger = {
		# 		scope:actor.dominance_value > scope:recipient.dominance_value
		# 	}
		# 	add = 20
		# }
		
		# Legitimacy
		modifier = {
			desc = "LOW_LEGITIMACY_REASON"
			scope:actor = {
				has_legitimacy_flag = very_reduced_tributarization_acceptance
			}
			add = -25
		}
		modifier = {
			desc = "LOW_LEGITIMACY_REASON"
			scope:actor = {
				has_legitimacy_flag = reduced_tributarization_acceptance
			}
			add = -10
		}
		modifier = {
			desc = "HIGH_LEGITIMACY_REASON"
			scope:actor = {
				has_legitimacy_flag = increased_tributarization_acceptance
			}
			add = 10
		}
		modifier = {
			desc = "HIGH_LEGITIMACY_REASON"
			scope:actor = {
				has_legitimacy_flag = very_increased_tributarization_acceptance
			}
			add = 25
		}

		# MINOR
		modifier = { # Rivalry modifier.
			desc = offer_vassalization_interaction_aibehavior_rival_tt
			trigger = {
				scope:recipient = {
					has_relation_rival = scope:actor
					NOT = { has_relation_nemesis = scope:actor }
				}
			}
			add = -10
		}
		modifier = { # Nemesis modifier.
			desc = offer_vassalization_interaction_aibehavior_nemesis_tt
			trigger = {
				scope:recipient = {
					has_relation_nemesis = scope:actor
				}
			}
			add = -30
		}
		modifier = { # Same Dynasty modifier.
			desc = offer_vassalization_interaction_aibehavior_dynasty_tt
			trigger = {
				scope:recipient = {
					dynasty = scope:actor.dynasty
				}
			}
			add = 10
		}
		modifier = { # Different faith, no pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:actor = {
					NOT = { # faith condition below doesn't have to apply if both actor and recipient have nomadic_philosophy
						has_trait = nomadic_philosophy
						scope:recipient = { has_trait = nomadic_philosophy }
					}
					faith = {
						NOR = { # Of two different faiths AND the potential vassal's faith is not pluralistic
							this = scope:recipient.faith
							has_doctrine = doctrine_pluralism_pluralistic
						}
					}
				}
			}
			add = {
				value = -25
				if = {
					limit = {
						scope:actor.faith = {
							faith_hostility_level = {
								target = scope:recipient.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -10
				}
				if = {
					limit = {
						scope:actor.faith = {
							faith_hostility_level = {
								target = scope:recipient.faith
								value >= faith_evil_level
							}
						}
					}
					add = -25
				}
			}
		}

		modifier = { # Encircled
			desc = offer_vassalization_interaction_aibehavior_encircled_tt
			trigger = {
				scope:recipient = {
					NOT = {
						any_neighboring_top_suzerain_realm_owner = {
							NOT = {
								this = scope:actor
							}
						}
					}
					NOT = {
						any_realm_county = {
							is_coastal_county = yes
						}
					}
				}
			}
			add = 30
		}

		modifier = { # Cultural Acceptance
			add = -5
			desc = cultural_acceptance_interaction_reason
			trigger = {
				scope:actor = {
					NOT = { # cultural condition below doesn't have to apply if both actor and recipient have nomadic_philosophy
						has_trait = nomadic_philosophy
						scope:recipient = { has_trait = nomadic_philosophy }
					}
					NOT = { has_same_culture_as = scope:recipient }
					culture = {
						cultural_acceptance = { target = scope:recipient.culture value < 50 }
					}
				}
			}
		}

		modifier = { # Same language
			add = 5
			desc = speaks_same_language_interaction_reason
			trigger = {
				scope:actor = {
					knows_language_of_culture = scope:recipient.culture
				}
			}
		}

		# OPINION INFLUENCE
		opinion_modifier = { # Compare Opinion modifier.
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
		}

		#Severed head acceptance
		# modifier = {
		# 	add = 200
		# 	scope:actor = {
		# 		has_variable = severed_head_vassalization
		# 		var:severed_head_vassalization = {
		# 			this = scope:recipient
		# 		}
		# 	}
		# }
	}
}

demand_tribute_permanent_tributary_interaction = {
	category = interaction_category_diplomacy
	common_interaction = yes
	icon = demand_tributary_interaction

	desc = demand_tributary_interaction_desc

	is_shown = {
		scope:actor = {
			NOT = { 
				government_has_flag = government_is_nomadic
				this = scope:recipient
				top_suzerain = scope:recipient.top_suzerain # ensures the actor and recipient is not already in the same "suzerain bloc"
				is_ai = yes
			}

			demand_tribute_peacefully_trigger = yes
			
			trigger_if = {
				limit = {
					is_ai = yes
				}
				current_military_strength >= scope:recipient.one_and_a_half_times_current_military_strength
				primary_title.tier >= scope:recipient.primary_title.tier
			}
		}
		scope:recipient = {
			highest_held_title_tier >= tier_county
			is_independent_ruler = yes # target cannot be a vassal
			NOT = { government_has_flag = cannot_be_vassal_or_liege }
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			custom_tooltip = {
				text = demand_tribute_requires_crown_authority_tt
				 has_realm_law_flag = can_have_tributaries
			}
		}
		scope:actor = {
			NOT = { has_truce = scope:actor }
			is_physically_able = yes
			is_travelling = no
			NOT = { exists = involved_activity }
		}
		scope:recipient = {
			is_tributary = no
			is_at_war = no
			custom_tooltip = {
				text = demand_tributary_interaction_cooldown_active_tt
				NOT = {
					has_opinion_modifier = {
						modifier = tributary_demanded_opinion
						target = scope:actor
					}
				}
			}
			is_confederation_member = no
		}
		scope:actor = {
			custom_tooltip = {
				text = mpo_interaction_not_neighbouring_tt
				any_land_neighboring_realm_with_tributaries_owner = { 
					this = scope:recipient
				}
			}
		}
	}

	cost = {
		prestige = minor_prestige_value	
	}

	greeting = positive
	notification_text = DEMAND_TRIBUTARY_INTERACTION_NOTIFICATION

	on_accept = {
		demand_tribute_start_tributary_interaction_effect = {
			TRIBUTARY = scope:recipient
			SUZERAIN = scope:actor
		}
		scope:actor = {
			trigger_event = char_interaction.0362
		}
		scope:recipient = {
			add_opinion = {
				modifier = tributary_demanded_opinion # this opinion also acts as a built-in cooldown
				target = scope:actor
			}
		}
		consume_all_criminal_reasons_effect = {
			LIEGE = scope:actor
			CRIMINAL = scope:recipient
		}
	}

	on_decline = {
		scope:actor = {
			trigger_event = char_interaction.0363
		}
		scope:recipient = {
			add_opinion = {
				modifier = tributary_demanded_opinion # this opinion also acts as a built-in cooldown
				target = scope:actor
			}
			custom_tooltip = demand_tributary_interaction_cooldown_tt
		}
	}
	
	ai_maybe = yes

	ai_potential = {
		highest_held_title_tier > 1 # at least a count-level ruler
		is_independent_ruler = yes
	}

	ai_targets = {
		ai_recipients = neighboring_rulers_including_tributary_borders
		max = 5
	}

	ai_frequency = 4

	force_notification = yes

	ai_will_do = {	# AI will often do this to valid targets that aren't a military threat to them, especially if they're rich
		base = 0
		
		modifier = {
			add = {
				add = scope:recipient.gold
				divide = 10
				max = 100
			}
			desc = accumulated_wealth_reason
		}

		ai_military_threat_modifier_with_cbs = { 
			SENDER = scope:actor 
			RECEIVER = scope:recipient
			MULTIPLIER = -1 
		}

		#DON't MEDDLE WITH THE NOMADS
		modifier = {
			trigger = {
				scope:recipient = {
					government_has_flag = government_is_nomadic
				}
			}
			add = -40
		}

		# modifier = {
		# 	scope:recipient = { is_obedient_to = scope:actor }
		# 	add = 40
		# 	desc = obedient_interaction_reason
		# }

		modifier = { # Generally don't try to tributarize those of higher rank than you
			trigger = {
				"scope:recipient.tier_difference(scope:actor)" > 1
			}
			add = -40
		}

		# modifier = { # Generally don't try to tributarize those of higher dominance than you
		# 	trigger = {
		# 		scope:recipient.dominance_value > scope:actor.dominance_value
		# 	}
		# 	add = -50
		# }

		modifier = { # Remote Realm.
			trigger = {
				scope:actor = {
					NOT = {
						any_neighboring_top_liege_realm_owner = { this = scope:recipient }
					}
				}
				scope:actor.capital_province = { squared_distance = { target = scope:recipient.capital_province value >= 200000 } }
			}
			add = -25
		}

		#DON'T STEAL HERDERS FROM THE NOMADS
		modifier = {
			trigger = {
				scope:recipient = { government_has_flag = government_is_herder }
			}
			add = -1000
		}
	}

	ai_min_reply_days = 5
	ai_max_reply_days = 10
	
	# auto_accept = {
	# 	custom_tooltip = {
	# 		text = scheme_agent_aptitude.is_herder
	# 		scope:recipient = { government_has_flag = government_is_herder }
	# 	}
	# }

	ai_accept = {
		base = -80
		
		modifier = { # Perk boost
			desc = offer_vassalization_true_ruler_perk_tt
			trigger = {
				scope:actor = { has_perk = true_ruler_perk }
			}
			add = true_ruler_value
		}

		#Yurt bonuses
		# modifier = {
		# 	desc = tributary_yurt_02_domicile_building
		# 	trigger = {
		# 		scope:actor.domicile ?= { has_domicile_parameter = nomad_yurt_increased_tributary_acceptance_lvl_1 }
		# 	}
		# 	add = 5
		# }

		# modifier = {
		# 	desc = tributary_yurt_02_domicile_building
		# 	trigger = {
		# 		scope:actor.domicile ?= { has_domicile_parameter = nomad_yurt_increased_tributary_acceptance_lvl_2 }
		# 	}
		# 	add = 10
		# }

		# modifier = {
		# 	desc = tributary_yurt_02_domicile_building
		# 	trigger = {
		# 		scope:actor.domicile ?= { has_domicile_parameter = nomad_yurt_increased_tributary_acceptance_lvl_3 }
		# 	}
		# 	add = 15
		# }
 
		modifier = { # the bolder they are, the less likely they will agree to this and vice versa
			NOT = { ai_boldness = 0 }
			add = {
				value = ai_boldness
				multiply = -1
				divide = 2
			}
			desc = TRIBUTARY_BOLDNESS_REASON
		}

		modifier = { # the greedier they are, the less likely they will agree to this
			ai_greed > 0
			add = {
				value = ai_greed
				multiply = -1
				divide = 4
			}
			desc = TRIBUTARY_GREED_REASON
		}

		# modifier = {
		# 	is_obedient_to = scope:actor
		# 	add = 40
		# 	desc = obedient_interaction_reason
		# }
		
		# modifier = {
		# 	scope:actor = { is_gurkhan = yes }
		# 	add = 20
		# 	desc = gurkhan_interaction_reason
		# }
		
		# Easier to make Tributaries during the Zud season
		# modifier = {
		# 	any_character_situation = {
		# 		any_situation_sub_region = {
		# 			has_sub_region_phase_parameter = the_great_steppe_easier_tributaries
		# 			any_situation_sub_region_participant_group = {
		# 				participant_group_type = nomad_rulers_capital
		# 				participant_group_has_character = scope:actor
		# 			}
		# 		}
		# 	}
		# 	add = 25
		# 	desc = zud_season_reason
		# }
  		
  		# if the actor is a major threat to the recipient they're more likely to accept
		ai_military_threat_modifier_with_cbs = {
			SENDER = scope:recipient 
			RECEIVER = scope:actor
			MULTIPLIER = 1 
		}

		modifier = { # They are a King
			desc = demand_tributary_interaction_aibehavior_hightier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier = tier_kingdom }
			}
			add = -20
		}

		modifier = { # They are an Emperor or greater
			desc = demand_tributary_interaction_aibehavior_hightier_tt
			trigger = {
				scope:recipient = { highest_held_title_tier >= tier_empire }
			}
			add = -50
		}

		# modifier = { # Recipient has higher Dominance than the actor
		# 	desc = demand_tributary_interaction_aibehavior_dominance_tt
		# 	trigger = {
		# 		scope:recipient.dominance_value > scope:actor.dominance_value
		# 	}
		# 	add = -20
		# }

		# modifier = { # Actor has higher Dominance than the recipient
		# 	desc = demand_tributary_interaction_aibehavior_dominance_tt
		# 	trigger = {
		# 		scope:actor.dominance_value > scope:recipient.dominance_value
		# 	}
		# 	add = 20
		# }
		
		# Legitimacy
		modifier = {
			desc = "LOW_LEGITIMACY_REASON"
			scope:actor = {
				has_legitimacy_flag = very_reduced_tributarization_acceptance
			}
			add = -25
		}
		modifier = {
			desc = "LOW_LEGITIMACY_REASON"
			scope:actor = {
				has_legitimacy_flag = reduced_tributarization_acceptance
			}
			add = -10
		}
		modifier = {
			desc = "HIGH_LEGITIMACY_REASON"
			scope:actor = {
				has_legitimacy_flag = increased_tributarization_acceptance
			}
			add = 10
		}
		modifier = {
			desc = "HIGH_LEGITIMACY_REASON"
			scope:actor = {
				has_legitimacy_flag = very_increased_tributarization_acceptance
			}
			add = 25
		}

		# MINOR
		modifier = { # Rivalry modifier.
			desc = offer_vassalization_interaction_aibehavior_rival_tt
			trigger = {
				scope:recipient = {
					has_relation_rival = scope:actor
					NOT = { has_relation_nemesis = scope:actor }
				}
			}
			add = -10
		}
		modifier = { # Nemesis modifier.
			desc = offer_vassalization_interaction_aibehavior_nemesis_tt
			trigger = {
				scope:recipient = {
					has_relation_nemesis = scope:actor
				}
			}
			add = -30
		}
		modifier = { # Same Dynasty modifier.
			desc = offer_vassalization_interaction_aibehavior_dynasty_tt
			trigger = {
				scope:recipient = {
					dynasty = scope:actor.dynasty
				}
			}
			add = 10
		}
		modifier = { # Different faith, no pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:actor = {
					NOT = { # faith condition below doesn't have to apply if both actor and recipient have nomadic_philosophy
						has_trait = nomadic_philosophy
						scope:recipient = { has_trait = nomadic_philosophy }
					}
					faith = {
						NOR = { # Of two different faiths AND the potential vassal's faith is not pluralistic
							this = scope:recipient.faith
							has_doctrine = doctrine_pluralism_pluralistic
						}
					}
				}
			}
			add = {
				value = -25
				if = {
					limit = {
						scope:actor.faith = {
							faith_hostility_level = {
								target = scope:recipient.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -10
				}
				if = {
					limit = {
						scope:actor.faith = {
							faith_hostility_level = {
								target = scope:recipient.faith
								value >= faith_evil_level
							}
						}
					}
					add = -25
				}
			}
		}

		modifier = { # Encircled
			desc = offer_vassalization_interaction_aibehavior_encircled_tt
			trigger = {
				scope:recipient = {
					NOT = {
						any_neighboring_top_suzerain_realm_owner = {
							NOT = {
								this = scope:actor
							}
						}
					}
					NOT = {
						any_realm_county = {
							is_coastal_county = yes
						}
					}
				}
			}
			add = 30
		}

		modifier = { # Cultural Acceptance
			add = -5
			desc = cultural_acceptance_interaction_reason
			trigger = {
				scope:actor = {
					NOT = { # cultural condition below doesn't have to apply if both actor and recipient have nomadic_philosophy
						has_trait = nomadic_philosophy
						scope:recipient = { has_trait = nomadic_philosophy }
					}
					NOT = { has_same_culture_as = scope:recipient }
					culture = {
						cultural_acceptance = { target = scope:recipient.culture value < 50 }
					}
				}
			}
		}

		modifier = { # Same language
			add = 5
			desc = speaks_same_language_interaction_reason
			trigger = {
				scope:actor = {
					knows_language_of_culture = scope:recipient.culture
				}
			}
		}

		# OPINION INFLUENCE
		opinion_modifier = { # Compare Opinion modifier.
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
		}

		#Severed head acceptance
		# modifier = {
		# 	add = 200
		# 	scope:actor = {
		# 		has_variable = severed_head_vassalization
		# 		var:severed_head_vassalization = {
		# 			this = scope:recipient
		# 		}
		# 	}
		# }
	}
}

### Release as Tributary - unilateral
# actor = suzerain
# recipient = tributary

demand_tribute_release_as_tributary_interaction = {
	category = interaction_category_vassal
	common_interaction = no
	icon = release_as_tributary
	interface_priority = 4

	desc = demand_tribute_release_as_tributary_interaction_desc

	is_shown = {
		scope:actor = {
			NOT = { government_has_flag = government_is_nomadic }
		}
		scope:recipient = {
			is_vassal_of = scope:actor
			NOT = { is_de_jure_vassal_of_liege_trigger = yes }
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			is_independent_ruler = yes
			is_at_war = no
		}
	}

	auto_accept = yes
	
	on_accept = {
		scope:actor = {
			hidden_effect = {
				send_interface_toast = {
					type = event_toast_effect_neutral
					title = demand_tribute_release_as_tributary_interaction_toast
					left_icon = scope:actor
					right_icon = scope:recipient

					custom_tooltip = demand_tribute_release_as_tributary_interaction_toast_desc
				}
			}
		}
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = granted_independence_opinion
				opinion = 10
			}
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = yes
			}
			becomes_independent = {
				change = scope:change
			}

			resolve_title_and_vassal_change = scope:change
		}
		start_tributary_interaction_effect = {
			SUZERAIN = scope:actor
			TRIBUTARY = scope:recipient
		}
	}

	ai_potential = {
		this = top_liege
		vassal_count > vassal_limit
		any_vassal = {
			is_de_jure_vassal_of_liege_trigger = no
		}
	}

	ai_targets = {
		ai_recipients = vassals
	}

	ai_frequency = 12

	ai_will_do = {
		base = 0
		modifier = {
			scope:recipient = { # Only on your borders
				any_held_title = {
					tier = tier_county
					any_neighboring_county = {
						OR = {
							is_coastal_county = yes
							holder.top_liege != scope:recipient.top_liege
						}
					}
				}
			}
			add = 100
		}

		modifier = {
			scope:recipient = {
				has_relation_nemesis = scope:actor
			}
			add = 1000
		}

		modifier = {
			scope:recipient = {
				has_relation_nemesis = scope:actor
			}
			add = 1000
		}
	}
}

demand_tribute_release_as_permanent_tributary_interaction = {
	category = interaction_category_vassal
	common_interaction = no
	icon = release_as_tributary
	interface_priority = 4

	desc = demand_tribute_release_as_tributary_interaction_desc

	is_shown = {
		scope:actor = {
			NOT = { government_has_flag = government_is_nomadic }
			is_ai = no
		}
		scope:recipient = {
			is_vassal_of = scope:actor
			NOT = { is_de_jure_vassal_of_liege_trigger = yes }
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			is_independent_ruler = yes
			is_at_war = no
		}
	}

	auto_accept = yes
	
	on_accept = {
		scope:actor = {
			hidden_effect = {
				send_interface_toast = {
					type = event_toast_effect_neutral
					title = demand_tribute_release_as_tributary_interaction_toast
					left_icon = scope:actor
					right_icon = scope:recipient

					custom_tooltip = demand_tribute_release_as_tributary_interaction_toast_desc
				}
			}
		}
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = granted_independence_opinion
				opinion = 10
			}
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = yes
			}
			becomes_independent = {
				change = scope:change
			}

			resolve_title_and_vassal_change = scope:change
		}
		demand_tribute_start_tributary_interaction_effect = {
			SUZERAIN = scope:actor
			TRIBUTARY = scope:recipient
		}
	}

	ai_potential = {
		this = top_liege
		vassal_count > vassal_limit
		any_vassal = {
			is_de_jure_vassal_of_liege_trigger = no
		}
	}

	ai_targets = {
		ai_recipients = vassals
	}

	ai_frequency = 12

	ai_will_do = {
		base = 0
		modifier = {
			scope:recipient = { # Only on your borders
				any_held_title = {
					tier = tier_county
					any_neighboring_county = {
						OR = {
							is_coastal_county = yes
							holder.top_liege != scope:recipient.top_liege
						}
					}
				}
			}
			add = 100
		}

		modifier = {
			scope:recipient = {
				has_relation_nemesis = scope:actor
			}
			add = 1000
		}

		modifier = {
			scope:recipient = {
				has_relation_nemesis = scope:actor
			}
			add = 1000
		}
	}
}


demand_tribute_vassal_to_tributary_interaction = {
	category = interaction_category_vassal
	icon = become_tributary_interaction
	common_interaction = yes

	desc = mpo_vassal_to_tributary_interaction_desc

	ai_frequency = 8
	popup_on_receive = yes
	pause_on_receive = yes

	is_shown = {
		scope:actor = {
			is_ai = no
			is_vassal_of = scope:recipient
			NOT = {government_has_flag = government_is_nomadic}
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			is_imprisoned = no
		}
		scope:actor = {
			NOT = { is_de_jure_vassal_of_liege_trigger = yes }
			is_imprisoned = no
			NOR = {
				is_at_war_with = scope:recipient
				exists = involved_activity
				is_travelling = yes
			}
		}
	}
	
	is_highlighted = {
		always = yes
	}
	
	# Start with higher taxes
	send_option = {
		flag = high_obligations
		localization = VASSAL_TO_TRIBUTARY_HIGHER_OBLIGATIONS
	}
	
	#Use hook
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook	
		localization = GENERIC_SPEND_A_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	
	send_options_exclusive = no

	on_accept = {
		scope:actor = {
			show_as_tooltip = {
				break_subject_contract_and_establish_tributary_effect = { SUZERAIN = scope:recipient TRIBUTARY = scope:actor }
			}
		}
		scope:actor = {
			trigger_event = mpo_interactions_events.0010
		}
	}
	
	on_decline = {
		scope:actor = {
			#Letter response, they get a bit pissed
			trigger_event = mpo_interactions_events.0011
		}
	}

	ai_accept = {
		base = 0
		
		modifier = {
			add = -50
			desc = BASE_RELUCTANCE
		}
		
		# Do they like you?
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
			desc = AI_OPINION_REASON
		}
		
		# If you're friends
		modifier = {
			add = 50
			scope:recipient = {
				has_relation_friend = scope:actor
			}
			desc = AI_FRIEND_REASON
		}
		
		# If you're lovers
		modifier = {
			add = 50
			scope:recipient = {
				has_relation_lover = scope:actor
			}
			desc = AI_YOUR_LOVER
		}
		
		# You're using a hook
		modifier = {
			add = 100
			desc = SCHEME_WEAK_HOOK_USED
			scope:hook = yes
		}
		
		# You promised higher taxes
		modifier = {
			add = 25
			desc = AI_HIGHER_OBLIGATIONS_REASON
			scope:high_obligations = yes
		}
		
		# Are they Nomadic
		modifier = {
			add = 25
			desc = game_concept_nomadic_government
			scope:recipient = { government_has_flag = government_is_nomadic }
		}
	}

	ai_will_do = {
		base = 0
	}

	ai_targets = {
		ai_recipients = suzerain
	}
}